server.port = 9001
spring.datasource.url = jdbc:mysql://localhost:3306/orderservice?createDatabaseIfNotExists=true&useSSL=true
spring.datasource.username = budcoded
spring.datasource.password = 29MNsgjdavkrk35#22av12
spring.jpa.hibernate.ddl-auto = update
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
spring.application.name=order-service

management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

# Resilience4j Properties...
# To see all the states (closed, open, half open)
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
# Buffer size taken for events
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
# If calls are failing it won't change the states right away, it will wait for some count of requests
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
# providing the size also (after five failed requests, the circuit breaker will try to change the state)
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
# It means if 50% calls are failed
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
# how much to wait before going to half open state
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState.=5s
# how many call we have to allow in half open state so that the resilience4j can check whether the communication between order-service and inventory-service is working fine or not
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
# allowing transition from open to half open state (it will happen automatically)
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

# Resilience4j timeout property
# if the inventory service is not responding due to maybe slow database performance then it will wait for given time, then it will send timeout error
resilience4j.timelimiter.instances..inventory.timeout-duration=3s

# Resilience4j retry properties
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s